# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bzo-qkvwUYtgp8Q5R89pPG_z-yN_KGys
"""

import pandas as pd
import numpy as np
import statistics

diabetes = pd.read_csv('diabetes.csv')

diabetes.head(5)

df = pd.DataFrame(diabetes)

col_list = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']
for i in col_list:
  count=0
  for j in df[i]:
    if j ==0:
      count=count+1
  print(i+":",count)

df.head()

from numpy import cov
outcome =df['Outcome']
for i in col_list:
    correlation = df[i].corr(outcome)
    print("Correlation value of "+i+" with Outcome:",correlation)

df.corr()

feature_cols=['Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']
pred_col=['Outcome']

X = df[feature_cols].values

y=df[pred_col].values

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.25,random_state = 42)

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')

X_train = imputer.fit_transform(X_train)
X_test = imputer.fit_transform(X_test)

#Apply different Algorithms to see which fits best
#RandomForestClassifier
#NaiveByesClassifer
#LogisticRegression
#SupportVectorMachine
#DecisionTree

#RandomForest
from sklearn.ensemble import RandomForestClassifier

model1 = RandomForestClassifier(random_state=5)

model1.fit(X_train,y_train)

#Prediction through Random forest classifier
prediction = model1.predict(X_test)

from sklearn import metrics

#Accuracy
print("Accuracy = {0:.3f}".format(metrics.accuracy_score(y_test,prediction)))
RandomForestacc = metrics.accuracy_score(y_test,prediction)

#Naive Byes Algorithm
from sklearn.naive_bayes import GaussianNB

model2 = GaussianNB()

model2.fit(X_train,y_train)

prediction = model2.predict(X_test)

print("Accuracy = {0:.3f}".format(metrics.accuracy_score(y_test,prediction)))
NaiveByesacc = metrics.accuracy_score(y_test,prediction)

#LogisticRegression
from sklearn.linear_model import LogisticRegression

model3 = LogisticRegression(random_state=5)

model3.fit(X_train,y_train)

prediction = model3.predict(X_test)

print("Accuracy = {0:.3f}".format(metrics.accuracy_score(y_test,prediction)))
LRsacc = metrics.accuracy_score(y_test,prediction)

#SupportVectorMachine

from sklearn import svm


model4 = svm.SVC()

model4.fit(X_train,y_train)

prediction = model4.predict(X_test)

print("Accuracy = {0:.3f}".format(metrics.accuracy_score(y_test,prediction)))
SVMacc = metrics.accuracy_score(y_test,prediction)

#DecisionTreeClassifier

from sklearn.tree import DecisionTreeClassifier

model5 = DecisionTreeClassifier()

model5.fit(X_train,y_train)

prediction = model5.predict(X_test)

print("Accuracy = {0:.3f}".format(metrics.accuracy_score(y_test,prediction)))
DTacc = metrics.accuracy_score(y_test,prediction)

#Accuracies

print("Accuracy of Random Forest Classifier = ",RandomForestacc)
print("Accuracy of Naive Byes Classifier = ",NaiveByesacc)
print("Accuracy of Logistic Regression = ",LRsacc)
print("Accuracy of Support Vector Machine = ",SVMacc)
print("Accuracy of Decision Tree Classifier = ",DTacc)

#RandomForestClassifier has the best accuracy
print(RandomForestacc)

